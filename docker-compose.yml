version: '3.8'

networks:
  log-analyser-network:
    driver: bridge

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: log-analyser-backend
    volumes:
      # Data persistence
      - ./logs:/app/logs:rw
      - ./logs.db:/app/logs.db:rw
      - ./config.yaml:/app/config.yaml:ro
      - ./alert_state.json:/app/alert_state.json:rw
      - ./alerts_paused.flag:/app/alerts_paused.flag:rw
      # AWS credentials (use environment variables for production)
      - ~/.aws:/home/appuser/.aws:ro
    environment:
      # Core settings
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Email configuration
      - GMAIL_USER=${GMAIL_USER:-}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD:-}
      - ALERT_RECIPIENT=${ALERT_RECIPIENT:-}
      
      # Slack configuration
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      
      # AWS Bedrock Configuration for AI Analytics
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - BEDROCK_ENABLED=${BEDROCK_ENABLED:-true}
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      
      # Application settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_LOGS_IN_MEMORY=${MAX_LOGS_IN_MEMORY:-10000}
      - AI_ANALYTICS_ENABLED=${AI_ANALYTICS_ENABLED:-true}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - log-analyser-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/system_logs/status')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./dashboard-frontend
      dockerfile: Dockerfile.frontend
    container_name: log-analyser-frontend
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - log-analyser-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
